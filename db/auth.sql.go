// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: auth.sql

package db

import (
	"context"
	"database/sql"
)

const activatePartner = `-- name: ActivatePartner :exec
UPDATE "partner"
SET active = TRUE
WHERE id=$1 
RETURNING id, name, email, password, balance, active, stripe_id, wise_id, reason
`

func (q *Queries) ActivatePartner(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.activatePartnerStmt, activatePartner, id)
	return err
}

const changePassword = `-- name: ChangePassword :exec
UPDATE "partner"
SET password = COALESCE( $2, password )
WHERE id=$1 
RETURNING id, name, email, password, balance, active, stripe_id, wise_id, reason
`

type ChangePasswordParams struct {
	ID       int32  `json:"id"`
	Password string `json:"password"`
}

func (q *Queries) ChangePassword(ctx context.Context, arg *ChangePasswordParams) error {
	_, err := q.exec(ctx, q.changePasswordStmt, changePassword, arg.ID, arg.Password)
	return err
}

const checkUserEmail = `-- name: CheckUserEmail :one
SELECT EXISTS (
    SELECT 1 
    FROM "partner" 
    WHERE email = $1
)
`

func (q *Queries) CheckUserEmail(ctx context.Context, email string) (bool, error) {
	row := q.queryRow(ctx, q.checkUserEmailStmt, checkUserEmail, email)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const getPartnerStripeCustumerID = `-- name: GetPartnerStripeCustumerID :one
SELECT stripe_id 
FROM "partner"
WHERE id=$1
`

func (q *Queries) GetPartnerStripeCustumerID(ctx context.Context, id int32) (sql.NullString, error) {
	row := q.queryRow(ctx, q.getPartnerStripeCustumerIDStmt, getPartnerStripeCustumerID, id)
	var stripe_id sql.NullString
	err := row.Scan(&stripe_id)
	return stripe_id, err
}

const setNewStripeAccount = `-- name: SetNewStripeAccount :exec
UPDATE "partner"
SET stripe_id=$2
WHERE id=$1 
RETURNING id, name, email, password, balance, active, stripe_id, wise_id, reason
`

type SetNewStripeAccountParams struct {
	ID       int32          `json:"id"`
	StripeID sql.NullString `json:"stripe_id"`
}

func (q *Queries) SetNewStripeAccount(ctx context.Context, arg *SetNewStripeAccountParams) error {
	_, err := q.exec(ctx, q.setNewStripeAccountStmt, setNewStripeAccount, arg.ID, arg.StripeID)
	return err
}
