// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: partner.sql

package db

import (
	"context"
	"database/sql"
)

const createPartner = `-- name: CreatePartner :one
INSERT INTO 
	partner (id, name, email, password, balance, active, stripe_id, wise_id, reason
) 
VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9
)
RETURNING id, name, email, password, balance, active, stripe_id, wise_id, reason
`

type CreatePartnerParams struct {
	ID       int32          `json:"id"`
	Name     string         `json:"name"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
	Balance  float64        `json:"balance"`
	Active   bool           `json:"active"`
	StripeID sql.NullString `json:"stripe_id"`
	WiseID   sql.NullString `json:"wise_id"`
	Reason   sql.NullString `json:"reason"`
}

// Description: Insert a new partner record and return the created record
func (q *Queries) CreatePartner(ctx context.Context, arg CreatePartnerParams) (Partner, error) {
	row := q.queryRow(ctx, q.createPartnerStmt, createPartner,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Balance,
		arg.Active,
		arg.StripeID,
		arg.WiseID,
		arg.Reason,
	)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.Active,
		&i.StripeID,
		&i.WiseID,
		&i.Reason,
	)
	return i, err
}

const deletePartner = `-- name: DeletePartner :exec
DELETE FROM 
	partner
WHERE 
	id = $1
`

// Description: Delete a partner record by primary key
func (q *Queries) DeletePartner(ctx context.Context, id int32) error {
	_, err := q.exec(ctx, q.deletePartnerStmt, deletePartner, id)
	return err
}

const getPartner = `-- name: GetPartner :one
SELECT 
	id, name, email, password, balance, active, stripe_id, wise_id, reason
FROM 
	partner
WHERE 
	id = $1
LIMIT 1
`

// Description: Retrieve a single partner record by primary key
func (q *Queries) GetPartner(ctx context.Context, id int32) (Partner, error) {
	row := q.queryRow(ctx, q.getPartnerStmt, getPartner, id)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.Active,
		&i.StripeID,
		&i.WiseID,
		&i.Reason,
	)
	return i, err
}

const listPartners = `-- name: ListPartners :many
SELECT 
	id, name, email, password, balance, active, stripe_id, wise_id, reason
FROM 
	partner
ORDER BY 
	id
`

// Description: Retrieve all partner records ordered by primary key
func (q *Queries) ListPartners(ctx context.Context) ([]Partner, error) {
	rows, err := q.query(ctx, q.listPartnersStmt, listPartners)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Partner
	for rows.Next() {
		var i Partner
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Email,
			&i.Password,
			&i.Balance,
			&i.Active,
			&i.StripeID,
			&i.WiseID,
			&i.Reason,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePartner = `-- name: UpdatePartner :one
UPDATE 
	partner
SET name = $2, email = $3, password = $4, balance = $5, active = $6, stripe_id = $7, wise_id = $8, reason = $9
WHERE 
	id = $1
RETURNING id, name, email, password, balance, active, stripe_id, wise_id, reason
`

type UpdatePartnerParams struct {
	ID       int32          `json:"id"`
	Name     string         `json:"name"`
	Email    string         `json:"email"`
	Password string         `json:"password"`
	Balance  float64        `json:"balance"`
	Active   bool           `json:"active"`
	StripeID sql.NullString `json:"stripe_id"`
	WiseID   sql.NullString `json:"wise_id"`
	Reason   sql.NullString `json:"reason"`
}

// Description: Update a partner record by primary key and return the updated record
func (q *Queries) UpdatePartner(ctx context.Context, arg UpdatePartnerParams) (Partner, error) {
	row := q.queryRow(ctx, q.updatePartnerStmt, updatePartner,
		arg.ID,
		arg.Name,
		arg.Email,
		arg.Password,
		arg.Balance,
		arg.Active,
		arg.StripeID,
		arg.WiseID,
		arg.Reason,
	)
	var i Partner
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Email,
		&i.Password,
		&i.Balance,
		&i.Active,
		&i.StripeID,
		&i.WiseID,
		&i.Reason,
	)
	return i, err
}
